1
00:00:03,000 --> 00:00:11,000
In order to update the information in the database, you can send an UPDATE SQL statement.

2
00:00:11,000 --> 00:00:20,000
That's actually all you need to do, essentially, so we use, once again, sprintf here in order to gather an

3
00:00:20,000 --> 00:00:26,000
UPDATE SQL statement. Once again, this statement will contain dynamic data, at least in our example where

4
00:00:26,000 --> 00:00:33,000
we'll have data from a form. Since this data might contain dangerous special characters, we have to escape

5
00:00:33,000 --> 00:00:41,000
them, once again, using mysqli_real_escape_string, escaping them assembling the SQL statement using

6
00:00:41,000 --> 00:00:49,000
mysqli_query in order to send the statement to the database. Well, and then the data is updated in the

7
00:00:49,000 --> 00:00:59,000
database. So, with all those things said, let's go directly to our example and we'll _____ update form.

8
00:00:59,000 --> 00:01:10,000
I've already created an update.php file. It looks exactly like the insert.php file before we added code,

9
00:01:10,000 --> 00:01:15,000
because basically we need the same form, however, this time we do not want to insert something, we would like

10
00:01:15,000 --> 00:01:24,000
to update an existing record. Conveniently, the form already has some pre-filling logic, so we can use that

11
00:01:24,000 --> 00:01:37,000
logic in order to create an update form. We have to first retrieve the record which we would like to update,

12
00:01:37,000 --> 00:01:41,000
so how do we do that? First of all, we need to know which record to update.

13
00:01:41,000 --> 00:01:51,000
Each entry in our database has a number, an id, in the id column. The idea now is that we call the update.php

14
00:01:51,000 --> 00:02:03,000
script using update.php?id= 5. So we provide the id of the record to update as a URL parameter, as

15
00:02:03,000 --> 00:02:11,000
a query string component. The first step will now be to read out that component.

16
00:02:11,000 --> 00:02:22,000
So we check, is this set, so do we have $_GET of 'id'. It's part of the query string, so $_GET will hold it.

17
00:02:22,000 --> 00:02:30,000
So if this is set and if this is a number, we will use it. How can we find out whether the value $_GET of 'id'

18
00:02:30,000 --> 00:02:37,000
is a number? There are several ways of doing so. We could try to convert the value, which by default is

19
00:02:37,000 --> 00:02:43,000
a string since it's part of a query string. We could convert it to a number and then see what the

20
00:02:43,000 --> 00:02:48,000
result is. If the result is 0, then either the id was 0, which usually is not a good value, but

21
00:02:48,000 --> 00:02:57,000
anyway, or it wasn't a number and conversion just said, well, I can't convert it, here is a 0.

22
00:02:57,000 --> 00:03:04,000
That's one way. The other way would be we use one of the built-in functions PHP provides for that.

23
00:03:04,000 --> 00:03:14,000
One of them is called ctype_digit. Ctype_digit has a _____ value, in our case $_GET of 'id', and checks

24
00:03:14,000 --> 00:03:22,000
whether it consists of digits only. Of course, there could be some input like 010101 that's only digits,

25
00:03:22,000 --> 00:03:32,000
but well it's probably not a good number, but 010101 is 10,101. So, well, it kind of is a number still.

26
00:03:32,000 --> 00:03:40,000
We'll just use that for now. So if we have a value in 'id' in the URL, and if it consists of only digits,

27
00:03:40,000 --> 00:03:47,000
well then we are good to go. So we store it in the variable right now because we will need it later on.

28
00:03:47,000 --> 00:03:52,000
We'll leave it as a string so we don't do any explicit conversion into an integer, because later we will

29
00:03:52,000 --> 00:04:03,000
stuff it into an SQL command and SQL string as well, so that's where we stand.

30
00:04:03,000 --> 00:04:12,000
However, what do we do if we do not get an id? Hmm, well, then we should somehow error out.

31
00:04:12,000 --> 00:04:18,000
I told you before we won't do much error handling, but at least in that case we should do something.

32
00:04:18,000 --> 00:04:22,000
And what I would like to do is I'd like to show you a specific feature.

33
00:04:22,000 --> 00:04:31,000
I'd like to redirect to another page. If I try to call the update page without any valid id or no id at all

34
00:04:31,000 --> 00:04:37,000
in the URL, I'd like to redirect to the list of users, to our select.php page.

35
00:04:37,000 --> 00:04:45,000
We do this redirections using an HTTP header called location, and the php function that sets such a header is

36
00:04:45,000 --> 00:04:59,000
called header, and we say 'location' and then select.php. This command issues the http header, thus the browser

37
00:04:59,000 --> 00:05:04,000
requests the select.php file from the server, essentially aborting the script here.

38
00:05:04,000 --> 00:05:08,000
There's one catch though. Depending on your configuration of PHP, this will give an error because we have

39
00:05:08,000 --> 00:05:18,000
already sent html to the browser, so we cannot just redirect, so we have to move this code up to the very

40
00:05:18,000 --> 00:05:26,000
beginning of the page in order to avoid any issues. So I'll just do cut and paste, and there we go,

41
00:05:26,000 --> 00:05:36,000
just indent a little bit to make it a little bit prettier. Okay, so we check the id, and then essentially

42
00:05:36,000 --> 00:05:47,000
we have an id value. If not, we redirect to the select page and now we can take care of the actual code.

43
00:05:47,000 --> 00:05:55,000
In our page here, we have the validation logic starting here, and the validation logic always runs when we

44
00:05:55,000 --> 00:06:03,000
have submitted the form. Now if we do not submit the form, what we could do is we could read out the

45
00:06:03,000 --> 00:06:12,000
current record. You see that name, gender, color, they are defaulting to empty strings, but we would like

46
00:06:12,000 --> 00:06:22,000
to actually load values from the database. Well, you have already seen how this is done more or less, so

47
00:06:22,000 --> 00:06:33,000
let's add some code for this right here. Once again, we connect to the database, so we do a mysqli_connect

48
00:06:33,000 --> 00:06:42,000
to 'localhost' using 'root', empty string, and accessing the php database.

49
00:06:42,000 --> 00:06:47,000
We store the return value in a variable because we need it when we set a query.

50
00:06:47,000 --> 00:07:00,000
What does the query look like? Well, we do a SELECT statement, SELECT * FROM users, however, this time we

51
00:07:00,000 --> 00:07:13,000
have a WHERE clause WHERE the id= and then a specific id. Which id do we use?

52
00:07:13,000 --> 00:07:20,000
Well, we already stored it in a variable, so let's just put it here at the end of the line, id.

53
00:07:20,000 --> 00:07:31,000
So we now have SELECT * FROM users WHERE id=, let's say 5 if you call the page with update.php? id=5.

54
00:07:31,000 --> 00:07:45,000
this will be sent to the database using mysqli_query, and now all we need to do is we have to read in the

55
00:07:45,000 --> 00:07:55,000
result. There are specific functions in PHP which we could use now in order to retrieve one specific

56
00:07:55,000 --> 00:08:03,000
result, however, in order to reuse what we have previously seen, and so that we do not need to add some

57
00:08:03,000 --> 00:08:13,000
extra functionality in here, we cheat a little bit, and what we'll do is we will use a foreach loop.

58
00:08:13,000 --> 00:08:20,000
Since we only got one record back, this foreach loop just runs once, but we can just reuse the code we had

59
00:08:20,000 --> 00:08:29,000
in our select.php file a bit earlier on. So for each $result as $row, there is only one row, but in that

60
00:08:29,000 --> 00:08:45,000
case that's fine, we just pre-fill $name with $row of 'name'. We pre-fill $gender with $row of 'gender'.

61
00:08:45,000 --> 00:08:59,000
And finally, we'll pre-fill $color with $row of 'color'. Now the values from the database are in the

62
00:08:59,000 --> 00:09:07,000
variables. The form fields will be pre-filled with those values, so the only thing remaining is, once the

63
00:09:07,000 --> 00:09:21,000
form is submitted and once the form data is okay, we will essentially need to write that to the database.

64
00:09:21,000 --> 00:59:00,000
Let's do this right away.

