1
00:00:03,000 --> 00:00:12,000
We've covered quite a lot in this module. First we saw that PHP puts all data from forms in the $_GET

2
00:00:12,000 --> 00:00:19,000
and $_POST arrays, depending of course on the HTTP method used by the form.

3
00:00:19,000 --> 00:00:25,000
So we had a POST form in our example, so all the data was put into $_POST.

4
00:00:25,000 --> 00:00:34,000
Had there been any data in the URL in the query string, then $_GET would have been filled as well, although we

5
00:00:34,000 --> 00:00:40,000
had a POST form. If we have a GET form, of course everything lands in $_GET.

6
00:00:40,000 --> 00:00:49,000
It looked like a lot of work to validate the form, but once you validated the text field you can validate

7
00:00:49,000 --> 00:00:56,000
all text fields in the same fashion. The same goes for the more complex constructs like multi-selection

8
00:00:56,000 --> 00:01:05,000
lists, for instance. We also saw how we could prefill form fields, so let's say if we had a form with 10

9
00:01:05,000 --> 00:01:13,000
form fields and the user fills out 9 of them correctly, at least those 9 values are kept and they are not lost

10
00:01:13,000 --> 00:01:21,000
just because the user made one tiny error. Finally, we also saw how we can defend against Cross-Site

11
00:01:21,000 --> 00:01:29,000
Scripting by properly escaping output, and in our case we were outputting HTML so we had to get rid of HTML

12
00:01:29,000 --> 00:01:36,000
special characters in the user input. The best way to do that was to escape those special characters

13
00:01:36,000 --> 00:01:43,000
with a built-in PHP function, htmlspecialchars took care of that, so we now have a fully functional and

14
00:01:43,000 --> 00:59:00,000
pretty secure HTML form with some PHP in the background.

