1
00:00:02,000 --> 00:00:09,000
I am back here within phpMyAdmin, because I would like to do some changes to the database we've been using

2
00:00:09,000 --> 00:00:19,000
for our sample application. I choose the php database, and within the php database under Structure, I

3
00:00:19,000 --> 00:00:27,000
have the users table, and within the Structure of the users table I see that we currently have four columns.

4
00:00:27,000 --> 00:00:34,000
I'd like to add 2 more, so I say 2 more columns at the end of the table is fine.

5
00:00:34,000 --> 00:00:41,000
I click Go, and now I have to provide the names and data types for those additional columns.

6
00:00:41,000 --> 00:00:51,000
One will be called password, and let's say it's a field of VARCHAR, 255 characters, where I will later store

7
00:00:51,000 --> 00:00:58,000
the password, or something similar to a password. Also, I'd like to store whether any user has

8
00:00:58,000 --> 00:01:06,000
administrative privileges, so how about adding a field, isAdmin, and as a data type we could use a Boolean

9
00:01:06,000 --> 00:01:16,000
or let's just use a bit of length 1, and by default, the default value for that is 0.

10
00:01:16,000 --> 00:01:26,000
So by default a user is not an Admin. I click on Save, and then the schema of the database has been changed,

11
00:01:26,000 --> 00:01:34,000
so if you go back to the structure you can see that now our table consists of 6 columns.

12
00:01:34,000 --> 00:01:41,000
Now that our sample application database table supports passwords, because we have a new column for that,

13
00:01:41,000 --> 00:01:46,000
we should actually store passwords in the database, or shouldn't we?

14
00:01:46,000 --> 00:01:54,000
Well, no actually we should not, because it's always a bad idea to store passwords in a database without

15
00:01:54,000 --> 00:02:03,000
encryption. Someone might succeed in stealing our database, and then the passwords are just gone.

16
00:02:03,000 --> 00:02:11,000
So if you have subscribed to a service on the web and you use the forgot the password feature because you just

17
00:02:11,000 --> 00:02:17,000
can't remember your super secure, very long, very many special characters password, and you get your

18
00:02:17,000 --> 00:02:25,000
original password back via email, that's usually a sign that the service stores your password without

19
00:02:25,000 --> 00:02:32,000
encryption, or they use an encryption they can reverse, both of which is not acceptable.

20
00:02:32,000 --> 00:02:41,000
So since _____ _____ at least if passwords were stored in a web application these passwords were hashed.

21
00:02:41,000 --> 00:02:47,000
So, there are algorithms that determine a kind of fingerprint for a password.

22
00:02:47,000 --> 00:02:52,000
So two different passwords have different fingerprints, and there is no way to retrieve the password from

23
00:02:52,000 --> 00:02:58,000
the fingerprint, however, only the fingerprint is stored, so if someone steals the database, only the

24
00:02:58,000 --> 00:03:08,000
fingerprint is stolen, but not the actual password. Formerly we were using MD5 or SHA1 algorithms for

25
00:03:08,000 --> 00:03:15,000
doing that hashing, however, nowadays with modern hardware, and in the case of MD5, even with not-so-modern

26
00:03:15,000 --> 00:03:23,000
hardware, they can be broken, so you should not rely on that. Now PHP provided a one-way encryption that is

27
00:03:23,000 --> 00:03:33,000
secure for several versions now, but it was not very easy to use. However, with PHP 5.5, a new programming

28
00:03:33,000 --> 00:03:43,000
interface, a new API was created, is now part of PHP, which makes it super easy to encrypt/hash passwords

29
00:03:43,000 --> 00:03:51,000
so that the encryption cannot be reversed, however, we can later validate whether any given password matches

30
00:03:51,000 --> 00:03:59,000
the encrypted information in the database. It's called the Password Hashing API, and you do need PHP 5.5 or

31
00:03:59,000 --> 00:04:05,000
higher. There are _____ implementations for earlier versions of PHP, but I'm assuming that you'd use a

32
00:04:05,000 --> 00:04:12,000
recent version of PHP so you can use the Password Hashing API, which is enabled by default in PHP so you

33
00:04:12,000 --> 00:04:20,000
don't have to do anything. This is how it works. You use the password_hash function, provide a top secret

34
00:04:20,000 --> 00:04:27,000
password, and fashion the algorithm, which should be used to encrypt or hash the password.

35
00:04:27,000 --> 00:04:35,000
The best option is the PHP constant PASSWORD_DEFAULT, which uses the best available algorithm at the time.

36
00:04:35,000 --> 00:04:43,000
The idea behind that is that a future PHP version might come with a newer or better algorithm, so you

37
00:04:43,000 --> 00:04:51,000
always use the latest and greatest. Still, old hashes still work when later verifying a password against

38
00:04:51,000 --> 00:04:58,000
that hash, but it's a good idea to use PASSWORD_DEFAULT if you would like to use a specific algorithm _____

39
00:04:58,000 --> 00:05:04,000
constant for all supported algorithms available as well, but PASSWORD_DEFAULT is a good value.

40
00:05:04,000 --> 00:05:11,000
Now the return value or a possible return value, I have to say, of that password hashing can be seen here.

41
00:05:11,000 --> 00:05:19,000
So, well, it has not very much to do with the top secret password anymore, but that's something you can

42
00:05:19,000 --> 00:05:27,000
securely store in a database. It's not very useful to an attacker at the moment, it's just a hash, but what

43
00:05:27,000 --> 00:05:37,000
happens if later a user logs in and provides us with a password, let's say, topsecret, and you'd like to

44
00:05:37,000 --> 00:05:43,000
verify if that password matches the information in the database. Now there's a kind of a _____ function

45
00:05:43,000 --> 00:05:52,000
of password_hash, it's called password_verify. Password_verify expects first an input strings-- a password,

46
00:05:52,000 --> 00:06:00,000
and then a hash. And we are reusing the $p variable from before and return value of password_verify is a

47
00:06:00,000 --> 00:06:07,000
Boolean value, either true if the password matches information of the hash, or false if not.

48
00:06:07,000 --> 00:06:16,000
So when logging in, just read out the hash from the database, run password_verify, and then you know whether

49
00:06:16,000 --> 00:59:00,000
the supplied password is the one that has previously been stored as a hash in the database or not.

