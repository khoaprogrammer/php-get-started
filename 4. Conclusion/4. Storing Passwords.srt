1
00:00:03,000 --> 00:00:10,000
Let's use the Password Hashing API in our sample application. We have an insert form, and so far we can

2
00:00:10,000 --> 00:00:16,000
have a user with gender and color. Let's add a password for the user so that we can register user with a

3
00:00:16,000 --> 00:00:21,000
password or even users can register themselves. Let's go down to the markup.

4
00:00:21,000 --> 00:00:27,000
We have the username here, and let's just add a password field real quick.

5
00:00:27,000 --> 00:00:33,000
So we have a password field, which looks similar to a text field, but has a different type, and of course

6
00:00:33,000 --> 00:00:40,000
a different name. And for pre-filling out that field, well actually we shouldn't pre-fill password fields,

7
00:00:40,000 --> 00:00:47,000
we could add a new $password variable right here and then pre-fill it, but you shouldn't pre-fill password

8
00:00:47,000 --> 00:00:52,000
fields, you have to enter this each and every time, so let's just remove this here.

9
00:00:52,000 --> 00:01:01,000
Now, what we then need to do is we have to stick with our validation, so let's just copy the approach and

10
00:01:01,000 --> 00:01:10,000
start with a password variable which defaults to an empty string, and I copy and paste this validation code

11
00:01:10,000 --> 00:01:14,000
for the text field, because the password field is basically the same.

12
00:01:14,000 --> 00:01:23,000
Instead of name I just write password -- $_POST will be  the variable name, so $_POST of 'password'

13
00:01:23,000 --> 00:01:32,000
two times, and otherwise, $password is the variable for $_POST of 'password', alright.

14
00:01:32,000 --> 00:01:38,000
Now after the validation is out of the way, we have to amend our database code.

15
00:01:38,000 --> 00:01:46,000
Instead of adding three values to the database, we now add four, name, and password, and gender, and color,

16
00:01:46,000 --> 00:01:57,000
and of course we need one more placeholder here. We fill that placeholder with mysqli_real_escape_string,

17
00:01:57,000 --> 00:02:04,000
and then, well, not password. Why not password? Because in that case we would store the password in clear

18
00:02:04,000 --> 00:02:10,000
text in the database. Not so good, so let's use the Password Hashing API.

19
00:02:10,000 --> 00:02:21,000
We call password_hash of the password using the default encryption algorithm, and we store this in a variable

20
00:02:21,000 --> 00:02:30,000
called, let's say, hash. And what we store in the database is now the hash value, not the clear text

21
00:02:30,000 --> 00:02:35,000
password, we store the hash, we generate with the Password Hashing API.

22
00:02:35,000 --> 00:02:43,000
So whenever a new user is registered with a password, that password is hashed or encrypted, one way, and

23
00:02:43,000 --> 00:02:50,000
then sent to the database, so no clear text passwords in the database.

24
00:02:50,000 --> 00:02:56,000
We will try that in the browser right away. We go to the INSERT page, which now features a Password field.

25
00:02:56,000 --> 00:03:07,000
We register user, christian, Password, well, topsecret, I won't tell you what it is, and the Gender, any

26
00:03:07,000 --> 00:03:16,000
color will do, Submit, User has been added. Let's go to phpMyAdmin, go to Browse, we now have two users

27
00:03:16,000 --> 00:03:27,000
and the user christian has a password, and that's not topsecret, what I entered, but it's the hashed password.

28
00:03:27,000 --> 00:03:33,000
And I will now do something manually in phpMyAdmin, because we'll not create a UI for that.

29
00:03:33,000 --> 00:03:40,000
I go to Edit and I will change the isAdmin field to a 1, because I want to be an admin.

30
00:03:40,000 --> 00:03:45,000
I would later like to use the administrative features of our application.

31
00:03:45,000 --> 00:03:52,000
So I'll store that, and if we have a look at the contents of our database again, and scroll a little bit to

32
00:03:52,000 --> 00:03:58,000
the right, we'll see that, yes, user christian is an Admin, rasmus is not.

33
00:03:58,000 --> 00:04:07,000
So you see how easy and convenient it is to use PHP's Password Hashing API to store, not passwords, but their

34
00:04:07,000 --> 00:59:00,000
hashes for later verification use.

