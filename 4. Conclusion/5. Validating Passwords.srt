1
00:00:03,000 --> 00:00:09,000
The user's password is safely stored in the database. Let's see how we get the password out of the database now.

2
00:00:09,000 --> 00:00:18,000
I create a new file. I'll start with an HTML File, and I call it login.php.

3
00:00:18,000 --> 00:00:28,000
Now the editor still wants to add .html, so I rename the file so that we have a real php file, and in that

4
00:00:28,000 --> 00:00:36,000
php file I'd like to add a very simple login form, just to see how we can verify the password in the database.

5
00:00:36,000 --> 00:00:45,000
It's actually not that hard. We use a form which uses http "post".

6
00:00:45,000 --> 00:00:53,000
Action is empty string, which means we send the form data to the actual current php script, and then we have

7
00:00:53,000 --> 00:01:04,000
two fields. So we have the User name, which is a text field, and let's say it's called "name".

8
00:01:04,000 --> 00:01:15,000
And we have a Password, and that's the password field, input type="password", name="password" as well,

9
00:01:15,000 --> 00:01:22,000
easy to remember, and we have a submit button, input type="submit", and as a caption we use, let's just say

10
00:01:22,000 --> 00:01:32,000
"Login". And then we write some PHP code to verify whether that login would work or not.

11
00:01:32,000 --> 00:01:42,000
First of all we determine whether the form has been submitted, so if isset $_POST of 'name', so do we get

12
00:01:42,000 --> 00:01:51,000
a user name, and do we also get a password. We could also check whether we get a string as we did before.

13
00:01:51,000 --> 00:01:56,000
We could also check if there is something inside those fields or if they are just empty strings, but I

14
00:01:56,000 --> 00:02:03,000
would say so far this is a good start, and now we connect to the database as before.

15
00:02:03,000 --> 00:02:14,000
So, mysqli_connect('localhost') using a user, a password, and connecting to a specific database provided by

16
00:02:14,000 --> 00:02:25,000
its name, we then put together an sql statement. We use sprintf once again, and let's just SELECT * FROM

17
00:02:25,000 --> 00:02:35,000
users WHERE name=, and then use single quotes again, so maybe double quotes for the string are a bit nicer

18
00:02:35,000 --> 00:02:40,000
so we don't have to escape the single quote, WHERE name= placeholder.

19
00:02:40,000 --> 00:02:46,000
The password is out of the picture at the moment. It will be added to the picture later, but first of all we

20
00:02:46,000 --> 00:02:55,000
have to find a value for the placeholder, and of course, once again we use mysqli_real_escape_string with

21
00:02:55,000 --> 00:03:03,000
the database connection and the value to escape the username  $_POST of 'name'.

22
00:03:03,000 --> 00:03:15,000
That's the statement, and then we have mysqli_query, $db, and then the sql statement, and get a result back.

23
00:03:15,000 --> 00:03:25,000
Now, of course, we hope that these results contain one data set, one record to be exact, so how do we do that?

24
00:03:25,000 --> 00:03:30,000
So, of course, we could try the foreach loop again and either the loop runs 0 times or it runs at least once,

25
00:03:30,000 --> 00:03:37,000
but I think in that case we should specifically fetch the first record.

26
00:03:37,000 --> 00:03:46,000
And there is a function for that which returns a row, and that function is called mysqli_fetch.

27
00:03:46,000 --> 00:03:53,000
And you see there are a lot of fetch methods, and we use assoc, because it gives us an associative array,

28
00:03:53,000 --> 00:04:03,000
that's what assoc stands for. So we just call mysqli_fetch_assoc of the result, and then $row is an

29
00:04:03,000 --> 00:04:07,000
associative array with all the data we got back, if we got data back.

30
00:04:07,000 --> 00:04:18,000
If not, $row is in that case false or null, which in PHP, at least in our context, is pretty similar.

31
00:04:18,000 --> 00:04:25,000
So what we can do is this. We just do if ($row), because if it's false enough, then essentially it's just

32
00:04:25,000 --> 00:04:30,000
like false, and the statement from the if will not be executed.

33
00:04:30,000 --> 00:04:37,000
However, if there is something in $row, we can process it. If not, so let's start with else right here,

34
00:04:37,000 --> 00:04:47,000
we just do a 'Login failed.' And well, if you have something in the row we are interested in two things,

35
00:04:47,000 --> 00:04:54,000
we are interested in the password and well actually it's not the password, it's the hash, and that's what

36
00:04:54,000 --> 00:05:00,000
we have in $row of 'password' because that's the name of the column.

37
00:05:00,000 --> 00:05:07,000
We might also be interested in isAdmin, which is $row of 'isAdmin'.

38
00:05:07,000 --> 00:05:14,000
We won't use this right away, but we might use it later. So we got the hash from the database for the given

39
00:05:14,000 --> 00:05:20,000
user, and we have to verify whether that hash matches the password the user just entered.

40
00:05:20,000 --> 00:05:32,000
So what we do is this, if (password_verify), and then first the password, which is $_POST of 'password', and

41
00:05:32,000 --> 00:05:40,000
next after the password we use the hash, $hash. And if that matches, so if we can verify the password

42
00:05:40,000 --> 00:05:47,000
against the hash in the database, then we can do a 'Login successful.'

43
00:05:47,000 --> 00:05:56,000
Otherwise, again we have 'Login failed.' So this 'Login failed.' essentially means password wasn't correct.

44
00:05:56,000 --> 00:06:02,000
This 'Login failed.' down here means well the user doesn't exist, but we shouldn't give the user too much

45
00:06:02,000 --> 00:06:10,000
information as to why logging in did not work, so let's just stick with 'Login successful.', 'Login failed.'

46
00:06:10,000 --> 00:06:16,000
Well, and in the end we just do mysqli_close of our database connection.

47
00:06:16,000 --> 00:06:21,000
So we connect to the database, we check whether we got the user, we check the password hash from the user,

48
00:06:21,000 --> 00:06:34,000
verified against the password the user supplied upon login, and then we either get a yes or no.

49
00:06:34,000 --> 00:06:41,000
After removing the semi-colon here, let's run this in the browser.

50
00:06:41,000 --> 00:06:50,000
I am loading login.php, and I try to login with a user that doesn't exist and an arbitrary password, and

51
00:06:50,000 --> 00:06:57,000
login failed. Then I try to log in with christian, my user name, and some arbitrary password, Login failed.

52
00:06:57,000 --> 00:07:04,000
And finally, I try to login with my user name and topsecret, logging in, and Login successful.

53
00:07:04,000 --> 00:07:11,000
So, our login form works, well at least it tells us whether it would work if there was some additional

54
00:07:11,000 --> 00:59:00,000
logic, but we'll come to that in a bit.

